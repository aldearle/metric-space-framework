package dataPoints.permutations;

import java.util.ArrayList;

import util.OrderedList;

/**
 * 
 * provides a permutation ordering so that associated distances can be used with
 * that
 * 
 * @author Richard Connor
 * 
 */
public class Permutation extends ArrayList<Integer> {

	public static double[] dists = { 9.132194880683825E-8, 0.17612262024500613,
			0.23340043751119963, 0.33896598770422975, 0.21052186413240587,
			0.21991692113110364, 0.19626280035368737, 0.27008243152164163,
			0.2950534306462934, 0.22510899497575299, 0.22310787849447503,
			0.35377540462540447, 0.22406635513281334, 0.20093969434670453,
			0.23993565145380266, 0.2213520582378045, 0.26901061007958216,
			0.1927977514455221, 0.21926199059064144, 0.29471461210413197,
			0.19167465451702093, 0.28452703313761263, 0.17527628641966722,
			0.23974661165035638, 0.19546289077847095, 0.25713567732266196,
			0.19557425442096504, 0.32946137885395016, 0.17784686129651736,
			0.23234060098550516, 0.2700754534391151, 0.2367958624547831,
			0.18843597403780857, 0.22450048557479138, 0.19875110046595493,
			0.20260298657773962, 0.27740614015809123, 0.18190594776713756,
			0.1652465045359316, 0.21201228382772297, 0.26502558834632456,
			0.4558778717979457, 0.21557951081708776, 0.20926777920187967,
			0.31152981519409245, 0.2917374224633861, 0.1808831218353827,
			0.23650921840260275, 0.22037487198721892, 0.15432366149073676,
			0.2117424458042369, 0.27127441848627726, 0.24726008087888665,
			0.15000223790582157, 0.18375381601021487, 0.18863204159538255,
			0.2380946134457241, 0.22897931329226767, 0.23885960414168247,
			0.19809490571711696, 0.1938507235569456, 0.21926905860748194,
			0.21900396516043066, 0.2741956511975164, 0.23420124530589637,
			0.19917389091852272, 0.29301507257355136, 0.3263975610744984,
			0.22851385884021294, 0.16094221293821365, 0.24754916034148225,
			0.2553429176405686, 0.24782854911804306, 0.3025205833253309,
			0.19849422643942322, 0.1656684359763642, 0.18199064359656889,
			0.3597720631810518, 0.274705355586828, 0.19579713311077973,
			0.3268998253840378, 0.16072404599919649, 0.18345842114880803,
			0.2071006936415985, 0.24331105091591487, 0.18827498905197607,
			0.20767646025465283, 0.2632781173415377, 0.27206924936462556,
			0.19044098130611062, 0.2159524702635598, 0.38173119567271296,
			0.29571209631674056, 0.15302643980079078, 0.1926590861814253,
			0.25788696990245125, 0.19990517161693772, 0.23066741854012943,
			0.16570446096651803, 0.18063079070180701, };

	/**
	 * Creates a permutation based on the array of distances, according to their
	 * magnitude
	 * 
	 * I expect there's a wickedly efficient way of doing this recursively...
	 * this isn't it!
	 * 
	 * @param distances
	 */
	public Permutation(double[] distances) {
		super();

		OrderedList<Integer, Double> ol = new OrderedList<Integer, Double>(
				distances.length);
		int[] perm = new int[distances.length];
		int place = 0;
		for (double d : distances) {
			ol.add(place++, d);
		}
		int n = 0;
		for (int i : ol.getList()) {
			perm[i] = n++;
		}

		for (int i : perm) {
			this.add(i);
		}

	}

	public static void main(String[] args) {
		// for testing only

		Permutation p = new Permutation(dists);

		System.out.println(p);
	}
}
